name: Build on Release created

on:
  release:
    types:
      - created
#on: push

jobs:
  build-macos:
    name: Build MacOS Packages (Intel)
    runs-on: macos-13

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      # 手动初始化和更新子模块
      - name: Fetch submodules
        run: |
          git submodule init
          git submodule update

      # 安装特定版本组合
      - name: Install compatible CGAL and Boost
        run: |
          # 安装CGAL 5.5与Boost 1.83的组合
          brew install cgal@5.5 boost@1.83 || brew install cgal boost
          
          # 或者更简单地安装最新版本
          # brew install cgal boost

      # 安装最新版本的Boost、CGAL和其他依赖
      - name: Install dependencies
        run: |
          brew install mpfr eigen
          
          # 创建兼容层以处理任何剩余的兼容性问题
          mkdir -p /tmp/boost_compat/boost
          cat > /tmp/boost_compat/boost/next_prior.hpp << 'EOF'
          #ifndef BOOST_NEXT_PRIOR_HPP_INCLUDED
          #define BOOST_NEXT_PRIOR_HPP_INCLUDED
          
          #include <iterator>
          
          namespace boost {
              template <class T>
              inline T prior(T x) { return --x; }
          
              template <class T, class Distance>
              inline T prior(T x, Distance n) {
                  std::advance(x, -n);
                  return x;
              }
          
              template <class T>
              inline T next(T x) { return ++x; }
          
              template <class T, class Distance>
              inline T next(T x, Distance n) {
                  std::advance(x, n);
                  return x;
              }
          }
          
          #endif // BOOST_NEXT_PRIOR_HPP_INCLUDED
          EOF
          
          # 确保构建时包含兼容层
          echo "CPPFLAGS=-I/tmp/boost_compat" >> $GITHUB_ENV
          echo "BOOST_INCLUDEDIR=$(brew --prefix boost)/include" >> $GITHUB_ENV
          echo "BOOST_LIBRARYDIR=$(brew --prefix boost)/lib" >> $GITHUB_ENV
          echo "BOOST_VERSION=$(brew info --json boost | jq -r '.[0].versions.stable')" >> $GITHUB_ENV

      # 修复GMP下载链接
      - name: Fix GMP Download URL
        run: |
          # 使用macOS兼容的sed语法
          sed -i '' 's|https://gmplib.org/download/gmp/gmp-6.2.1.tar.bz2|https://ftp.gnu.org/gnu/gmp/gmp-6.2.1.tar.bz2|g' sh/cmake-deps.sh
          mkdir -p deps/download
          curl -L -o deps/download/gmp-6.2.1.tar.bz2 https://ftp.gnu.org/gnu/gmp/gmp-6.2.1.tar.bz2 || true

      # 构建项目
      - name: Build project
        run: |
          # 架构特定处理
          chmod +x fix-arch-mismatch.sh
          ./fix-arch-mismatch.sh
          
          # 处理CGAL
          chmod +x process-cgal.sh
          ./process-cgal.sh
          
          # 构建主项目 (需要注意ARM64已经在fix-arch-mismatch.sh中构建了依赖)
          if [[ $(uname -m) != "arm64" ]]; then
            # 只在非ARM64环境中运行标准依赖构建
            /bin/bash sh/cmake-deps.sh
          fi
          
          # 再次运行CGAL处理
          ./process-cgal.sh
          
          # 构建主项目，使用任何设置的CMAKE_ARGS
          /bin/bash sh/cmake-build.sh

      # 测试
      - name: Test
        run: ./build/LunarMP version && ./build/LunarMP ptest
      
      # 准备输出
      - name: Prepare output
        run: mkdir output && cp ./build/LunarMP ./output/LunarMP

      # 完整的代码签名过程
      - name: Prepare for code signing
        run: mkdir -p ./output && cp ./build/LunarMP ./output/LunarMP

      # 导入证书
      - name: Import code signing certificates
        uses: apple-actions/import-codesign-certs@v1
        with:
          p12-file-base64: ${{ secrets.CERTIFICATES_P12 }}
          p12-password: ${{ secrets.CERTIFICATES_P12_PASSWORD }}

      # 安全的签名步骤
      - name: Sign the binary
        run: |
          # 使用双引号处理特殊字符
          codesign -s "${{ secrets.CERTIFICATES_NAME }}" --force ./output/LunarMP

      # 打包
      - name: Zip output
        uses: thedoctor0/zip-release@master
        with:
          type: zip
          filename: LunarMP-mac.zip
          directory: ./
          path: ./output

      # 上传
      - name: Upload Release Asset
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          files: LunarMP-mac.zip

      # 在macOS构建中添加这个直接修复步骤
      - name: Direct fix for boost::prior error
        run: |
          # 创建兼容层
          chmod +x create-compat-layer.sh
          ./create-compat-layer.sh
          
          # 等待deps目录生成后直接修复问题文件
          while [ ! -f ./deps/build/install/usr/local/include/CGAL/Intersections_3/internal/Plane_3_Triangle_3_intersection.h ]; do
            echo "等待CGAL文件生成..."
            sleep 5
          done
          
          echo "修复问题文件..."
          PROBLEM_FILE="./deps/build/install/usr/local/include/CGAL/Intersections_3/internal/Plane_3_Triangle_3_intersection.h"
          
          # 在文件开头添加我们的兼容层
          sed -i.bak '1s/^/#include <boost\/next_prior.hpp>\n/' "$PROBLEM_FILE"
          
          # 确保项目能找到兼容层
          echo "CPPFLAGS=-I$(pwd)/boost_compat" >> $GITHUB_ENV

      # 代码签名修复
      - name: Code signing step
        run: |
          # 确保输出目录存在
          mkdir -p ./output
          cp ./build/LunarMP ./output/LunarMP
          
          # 使用转义和引号保护证书名称
          if [ -n "${{ secrets.MACOS_CERTIFICATE_NAME }}" ]; then
            # 使用环境变量中的证书名称
            codesign -s "${{ secrets.MACOS_CERTIFICATE_NAME }}" ./output/LunarMP
          else
            # 如果没有配置证书，跳过签名
            echo "没有配置代码签名证书，跳过签名步骤"
            # 确认文件存在和可执行
            chmod +x ./output/LunarMP
          fi

  build-macos-arm64:
    name: Build MacOS Packages (ARM64)
    runs-on: macos-14

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
      
      # 手动初始化和更新子模块
      - name: Fetch submodules
        run: |
          git submodule init
          git submodule update

      # 安装特定版本组合
      - name: Install compatible CGAL and Boost
        run: |
          # 安装CGAL 5.5与Boost 1.83的组合
          brew install cgal@5.5 boost@1.83 || brew install cgal boost
          
          # 或者更简单地安装最新版本
          # brew install cgal boost

      # 安装最新版本的Boost、CGAL和其他依赖
      - name: Install dependencies
        run: |
          brew install mpfr eigen
          
          # 创建兼容层以处理任何剩余的兼容性问题
          mkdir -p /tmp/boost_compat/boost
          cat > /tmp/boost_compat/boost/next_prior.hpp << 'EOF'
          #ifndef BOOST_NEXT_PRIOR_HPP_INCLUDED
          #define BOOST_NEXT_PRIOR_HPP_INCLUDED
          
          #include <iterator>
          
          namespace boost {
              template <class T>
              inline T prior(T x) { return --x; }
          
              template <class T, class Distance>
              inline T prior(T x, Distance n) {
                  std::advance(x, -n);
                  return x;
              }
          
              template <class T>
              inline T next(T x) { return ++x; }
          
              template <class T, class Distance>
              inline T next(T x, Distance n) {
                  std::advance(x, n);
                  return x;
              }
          }
          
          #endif // BOOST_NEXT_PRIOR_HPP_INCLUDED
          EOF
          
          # 确保构建时包含兼容层
          echo "CPPFLAGS=-I/tmp/boost_compat" >> $GITHUB_ENV
          echo "BOOST_INCLUDEDIR=$(brew --prefix boost)/include" >> $GITHUB_ENV
          echo "BOOST_LIBRARYDIR=$(brew --prefix boost)/lib" >> $GITHUB_ENV
          echo "BOOST_VERSION=$(brew info --json boost | jq -r '.[0].versions.stable')" >> $GITHUB_ENV
          
          # 设置ARM64架构
          echo "CMAKE_OSX_ARCHITECTURES=arm64" >> $GITHUB_ENV

      # 修复GMP下载链接
      - name: Fix GMP Download URL
        run: |
          # 使用macOS兼容的sed语法
          sed -i '' 's|https://gmplib.org/download/gmp/gmp-6.2.1.tar.bz2|https://ftp.gnu.org/gnu/gmp/gmp-6.2.1.tar.bz2|g' sh/cmake-deps.sh
          mkdir -p deps/download
          curl -L -o deps/download/gmp-6.2.1.tar.bz2 https://ftp.gnu.org/gnu/gmp/gmp-6.2.1.tar.bz2 || true

      # 构建项目
      - name: Build project
        env:
          CMAKE_OSX_ARCHITECTURES: arm64
          MACOSX_DEPLOYMENT_TARGET: "13.0"
        run: |
          # 架构特定处理
          chmod +x fix-arch-mismatch.sh
          ./fix-arch-mismatch.sh
          
          # 处理CGAL
          chmod +x process-cgal.sh
          ./process-cgal.sh
          
          # 设置ARM64构建标志
          export CMAKE_ARGS="-DCMAKE_OSX_ARCHITECTURES=arm64"
          echo "CMAKE_ARGS=$CMAKE_ARGS" >> $GITHUB_ENV
          
          # 构建主项目，ARM64特定设置
          /bin/bash sh/cmake-build.sh

      # 测试
      - name: Test
        run: ./build/LunarMP version && ./build/LunarMP ptest
      
      # 准备输出
      - name: Prepare output
        run: mkdir output && cp ./build/LunarMP ./output/LunarMP

      # 完整的代码签名过程
      - name: Prepare for code signing
        run: mkdir -p ./output && cp ./build/LunarMP ./output/LunarMP

      # 导入证书
      - name: Import code signing certificates
        uses: apple-actions/import-codesign-certs@v1
        with:
          p12-file-base64: ${{ secrets.CERTIFICATES_P12 }}
          p12-password: ${{ secrets.CERTIFICATES_P12_PASSWORD }}

      # 安全的签名步骤
      - name: Sign the binary
        run: |
          # 使用双引号处理特殊字符
          codesign -s "${{ secrets.CERTIFICATES_NAME }}" --force ./output/LunarMP

      # 打包
      - name: Zip output
        uses: thedoctor0/zip-release@master
        with:
          type: zip
          filename: LunarMP-mac-arm64.zip
          directory: ./
          path: ./output

      # 上传
      - name: Upload Release Asset
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          files: LunarMP-mac-arm64.zip

      # 在 MacOS ARM64 构建中添加架构修复步骤
      - name: Comprehensive ARM64 Architecture Fix
        run: |
          chmod +x fix-arch-mismatch.sh
          ./fix-arch-mismatch.sh

  build-windows:
    name: Build Windows packages
    runs-on: windows-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
      
      # 手动初始化和更新子模块
      - name: Fetch submodules
        run: |
          git submodule init
          git submodule update

      # 安装特定版本的Boost
      - name: Install compatible Boost version
        run: |
          choco install boost-msvc-14.2 --version=1.71.0 --allow-downgrade

      # 修复GMP下载链接
      - name: Fix GMP Download URL
        shell: bash
        run: |
          sed -i 's|https://gmplib.org/download/gmp/gmp-6.2.1.tar.bz2|https://ftp.gnu.org/gnu/gmp/gmp-6.2.1.tar.bz2|g' sh/cmake-deps.sh
          mkdir -p deps/download
          curl -L -o deps/download/gmp-6.2.1.tar.bz2 https://ftp.gnu.org/gnu/gmp/gmp-6.2.1.tar.bz2 || true

      # 设置MSYS2
      - name: Setup MSYS2
        uses: msys2/setup-msys2@v2
        with:
          msystem: MINGW64
          path-type: inherit
          update: true
          install: >-
            base-devel
            mingw-w64-x86_64-toolchain
            m4
            gmp
            mpfr
            mingw-w64-x86_64-eigen3
            mingw-w64-x86_64-boost
            mingw-w64-x86_64-cgal

      # 修复MSYS2签名问题
      - name: Fix MSYS2 Signatures
        shell: msys2 {0}
        run: |
          echo "SigLevel = Never" >> /etc/pacman.conf
          pacman -Syu --noconfirm
          pacman -S --noconfirm --needed m4 gmp mpfr mingw-w64-x86_64-eigen3 mingw-w64-x86_64-boost mingw-w64-x86_64-cgal

      # 构建项目
      - name: Build project
        shell: msys2 {0}
        run: |
          sh sh/cmake-deps.sh
          sh sh/cmake-build.sh

      # 测试
      - name: Test
        run: ./build/LunarMP.exe version && ./build/LunarMP.exe ptest
      
      # 准备输出
      - name: Prepare output
        run: mkdir output && cp ./build/LunarMP.exe ./output/LunarMP.exe

      # 打包
      - name: Zip output
        uses: thedoctor0/zip-release@master
        with:
          type: zip
          filename: LunarMP-win64.zip
          directory: ./
          path: ./output

      # 上传
      - name: Upload Release Asset
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          files: ./LunarMP-win64.zip

  build-ubuntu:
    name: Build Ubuntu packages
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
      
      # 手动初始化和更新子模块
      - name: Fetch submodules
        run: |
          git submodule init
          git submodule update

      # 安装依赖
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libgmp-dev
          sudo apt-get install -y libmpfr-dev
          sudo apt-get install -y libboost-all-dev
          sudo apt-get install -y libeigen3-dev
          # 安装最新版本的CGAL
          sudo apt-get install -y libcgal-dev

      # 修复GMP下载链接
      - name: Fix GMP Download URL
        run: |
          sed -i 's|https://gmplib.org/download/gmp/gmp-6.2.1.tar.bz2|https://ftp.gnu.org/gnu/gmp/gmp-6.2.1.tar.bz2|g' sh/cmake-deps.sh
          mkdir -p deps/download
          curl -L -o deps/download/gmp-6.2.1.tar.bz2 https://ftp.gnu.org/gnu/gmp/gmp-6.2.1.tar.bz2 || true
          
      # 构建项目
      - name: Build project
        run: |
          # 创建并应用全局兼容层
          chmod +x process-cgal.sh
          ./process-cgal.sh
          
          # 正常构建流程
          /bin/bash sh/cmake-deps.sh
          
          # 再次运行处理脚本，确保deps安装后的CGAL文件也被处理
          ./process-cgal.sh
          
          # 使用处理后的环境变量构建
          source compile_env.sh && /bin/bash sh/cmake-build.sh

      # 测试
      - name: Test
        run: ./build/LunarMP version && ./build/LunarMP ptest
      
      # 准备输出
      - name: Prepare output
        run: mkdir output && cp ./build/LunarMP ./output/LunarMP

      # 打包
      - name: Zip output
        uses: thedoctor0/zip-release@master
        with:
          type: zip
          filename: LunarMP-linux.zip
          directory: ./
          path: ./output

      # 上传
      - name: Upload Release Asset
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          files: LunarMP-linux.zip
